// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DiscordUser {
  id  Int @id @default(autoincrement())
  discordSnowflake  String @unique
  ruleWarnings DiscordGuildRuleWarning[] @relation(name: "warnings")
  expungedUsers DiscordGuildRuleWarning[]
  messages Message[]
  tickets Ticket[]
  ticketMessage TicketMessage[]
}

model DiscordGuild {
  id  Int @id @default(autoincrement())
  discordSnowflake  String  @unique
  ticketCategoryId String?
  ticketCreationChannelId String?
  message Message[]
  blacklist DiscordGuildBlacklist[]
  rules DiscordGuildRule[]
  ticket Ticket[]
}

model BlacklistMessage {
  id  Int @id @default(autoincrement())
  message Message @relation(fields: [messageId], references: [id]) 
  messageId Int @unique
}

model DiscordGuildActionTier {
  id  Int @id @default(autoincrement())
  maxOffenses Int
  discordGuildRule DiscordGuildRule @relation(fields:[discordGuildRuleId], references: [id])
  discordGuildRuleId Int 
  ruleAction RuleAction @relation(fields:[ruleActionId], references: [id])
  ruleActionId Int
}

model DiscordGuildBlacklist {
  id  Int @id @default(autoincrement())
  word String
  discordGuild DiscordGuild @relation(fields: [discordGuildId], references: [id])
  discordGuildId Int
}

model DiscordGuildRule {
  id  Int @id @default(autoincrement())
  actionTier DiscordGuildActionTier[]
  ruleWarning DiscordGuildRuleWarning[]
  enabled Boolean
  discordGuild DiscordGuild @relation(fields: discordGuildId, references: [id])
  discordGuildId Int
  rule Rule @relation(fields: ruleId, references: [id])
  ruleId Int 
  ruleAction RuleAction @relation(fields: ruleActionId, references: [id])
  ruleActionId Int 
}

model DiscordGuildRuleWarning {
  id  Int @id @default(autoincrement())
  isExpunged Boolean
  discordGuildRule DiscordGuildRule @relation(fields: discordGuildRuleId, references: [id])
  discordGuildRuleId Int
  message Message @relation(fields: messageId, references: [id])
  messageId Int @unique
  discordUser DiscordUser @relation(name: "warnings",fields: discordUserId, references: [id])
  discordUserId Int
  expunged DiscordUser? @relation(fields: expungedBy, references: [id])
  expungedBy Int?
}

model Message {
  id  Int @id @default(autoincrement())
  blacklistMessage BlacklistMessage?
  ruleWarnings DiscordGuildRuleWarning[]
  discordUser DiscordUser @relation(fields: discordUserId, references: [id])
  discordUserId Int
  discordGuild DiscordGuild @relation(fields: discordGuildId, references: [id])
  discordGuildId Int
  message String
  sentiment Decimal
  comparitive Decimal
  messageSnowflake String @unique
}

model Rule {
  id  Int @id @default(autoincrement())
  discordGuildRules DiscordGuildRule[]
  name String @unique
}

model RuleAction {
  id  Int @id @default(autoincrement())
  actionTiers DiscordGuildActionTier[]
  discordGuildRules DiscordGuildRule[]
  name String @unique
}

model Ticket {
  id  Int @id @default(autoincrement())
  submittedByUser DiscordUser @relation(fields: submittedByUserId, references: [id])
  submittedByUserId Int
  discordGuild DiscordGuild @relation(fields: discordGuildId, references: [id])
  discordGuildId Int
  discordChannelSnowflake String
  reason String?
  status TicketStatus
  correlationId String?
  ticketMessage TicketMessage[]
}

model TicketMessage {
  id  Int @id @default(autoincrement())
  message String
  messageCreationDate DateTime
  messageSnowflake String
  photoMessage PhotoMessage[]
  discordUser DiscordUser @relation(fields: discordUserId, references: [id])
  discordUserId Int
  ticket Ticket @relation(fields: ticketId, references: [id])
  ticketId Int
}

model PhotoMessage {
  id  Int @id @default(autoincrement())
  fileName String
  size Int
  hash String
  ticketMessage TicketMessage @relation(fields: ticketMessageId, references: [id])
  ticketMessageId Int
}

enum TicketStatus {
  Open
  Resolved
  Pending
}